---
- name: Check if the AMI already exists
  amazon.aws.ec2_ami_info:
    filters:
      name: "{{ custom_ami_name }}"
  register: existing

- name: Create custom AMI
  when: (existing.images | length == 0) or (custom_ami_recreate_if_exists | bool)
  block:
    - name: Delete existing AMI
      amazon.aws.ec2_ami:
        name: "{{ existing.images.0.name }}"
        image_id: "{{ existing.images.0.image_id }}"
        wait: true
        state: absent
      when: existing.images | length > 0

    - name: Get source AMI id
      when: source_ami_image_id is not defined
      block:
        - name: Get source AMI image ID using filters
          amazon.aws.ec2_ami_info:
            filters: "{{ source_ami_filters }}"
          register: images
          # very spammy
          no_log: true

        - name: Fail when no AMI found using filters
          ansible.builtin.fail:
            msg: No AMI found using filters
          when: images.images | length == 0

    - name: Define AMI id to create EC2 instance
      ansible.builtin.set_fact:
        source_ami_image_id: "{{ source_ami_image_id is defined | ternary(source_ami_image_id, images.images.0.image_id) }}"

    - name: Create customized AMI
      vars:
        vpc_name: "vpc-{{ custom_ami_name }}"
        vpc_cidr: '10.{{ 255 | random(seed=custom_ami_name) }}.0.0/16'
        subnet_cidr: '10.{{ 255 | random(seed=custom_ami_name) }}.1.0/24'
      block:
        - name: Create vpc to work in
          amazon.aws.ec2_vpc_net:
            cidr_block: "{{ vpc_cidr }}"
            name: "{{ vpc_name }}"
            state: present
          register: custom_ami_vpc

        - name: Create EC2 subnet
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ custom_ami_vpc.vpc.id }}"
            cidr: "{{ subnet_cidr }}"
          register: subnet

        - name: Create a virtual machine
          amazon.aws.ec2_instance:
            instance_type: "{{ custom_ami_ec2_instance_type }}"
            image_id: "{{ source_ami_image_id is defined | ternary(source_ami_image_id, images.images.0.image_id) }}"
            wait: true
            subnet_id: "{{ subnet.subnet.id }}"
            state: started
            network:
              assign_public_ip: false
            user_data: "{{ lookup('template', 'fedora-user-data.j2') }}"
          register: create_instance

        - name: Create custom AMI from instance id
          amazon.aws.ec2_ami:
            instance_id: "{{ create_instance.instances.0.instance_id }}"
            name: "{{ custom_ami_name }}"
            wait: true
            state: present

      always:
        - name: Delete EC2 resources used to create customized AMI
          vars:
            vpc_id: "{{ custom_ami_vpc.vpc.id }}"
          when:
            - custom_ami_vpc is defined
            - custom_ami_vpc.vpc is defined
          block:
            - name: List running instances
              amazon.aws.ec2_instance_info:
                filters:
                  vpc-id: "{{ vpc_id }}"
              register: _instances

            - name: Delete virtual machine
              amazon.aws.ec2_instance:
                instance_ids: "{{ _instances.instances | map(attribute='instance_id') | list }}"
                wait: true
                state: absent

            - name: Delete Subnets
              amazon.aws.ec2_vpc_subnet:
                vpc_id: "{{ vpc_id }}"
                cidr: "{{ subnet_cidr }}"
                state: absent

            - name: Delete a VPC
              amazon.aws.ec2_vpc_net:
                cidr_block: "{{ vpc_cidr }}"
                vpc_id: "{{ vpc_id }}"
                state: absent

- name: Check that existing AMI found
  ansible.builtin.debug:
    msg: "Existing AMI found with name: '{{ custom_ami_name }}'"
  when:
    - existing.images | length > 0
    - not (custom_ami_recreate_if_exists | bool)
